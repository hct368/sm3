; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\hub\sm3\test.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_tv_plain
PUBLIC	_tv_cipher2
PUBLIC	_tv_cipher
PUBLIC	_tv_key
_DATA	SEGMENT
_tv_plain DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_tv_cipher2 DB	059H
	DB	052H
	DB	098H
	DB	0c7H
	DB	0c6H
	DB	0fdH
	DB	027H
	DB	01fH
	DB	04H
	DB	02H
	DB	0f8H
	DB	04H
	DB	0c3H
	DB	03dH
	DB	03fH
	DB	066H
_tv_cipher DB	068H
	DB	01eH
	DB	0dfH
	DB	034H
	DB	0d2H
	DB	06H
	DB	096H
	DB	05eH
	DB	086H
	DB	0b3H
	DB	0e9H
	DB	04fH
	DB	053H
	DB	06eH
	DB	042H
	DB	046H
_tv_key	DB	01H
	DB	023H
	DB	045H
	DB	067H
	DB	089H
	DB	0abH
	DB	0cdH
	DB	0efH
	DB	0feH
	DB	0dcH
	DB	0baH
	DB	098H
	DB	076H
	DB	054H
	DB	032H
	DB	010H
_DATA	ENDS
PUBLIC	??_C@_04NOJCDH@?$CF02x?$AA@			; `string'
PUBLIC	??_C@_07FFGCOJMP@?6SM3?5?$DN?5?$AA@		; `string'
PUBLIC	_main
EXTRN	_putchar:PROC
EXTRN	_printf:PROC
EXTRN	_SM3_Finalx:PROC
EXTRN	_SM3_Update:PROC
EXTRN	_SM3_Init:PROC
;	COMDAT ??_C@_04NOJCDH@?$CF02x?$AA@
; File c:\hub\sm3\test.c
CONST	SEGMENT
??_C@_04NOJCDH@?$CF02x?$AA@ DB '%02x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FFGCOJMP@?6SM3?5?$DN?5?$AA@
CONST	SEGMENT
??_C@_07FFGCOJMP@?6SM3?5?$DN?5?$AA@ DB 0aH, 'SM3 = ', 00H ; `string'
; Function compile flags: /Ogspy
CONST	ENDS
;	COMDAT _main
_TEXT	SEGMENT
_ctx$ = -136						; size = 104
_out$ = -32						; size = 32
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC						; COMDAT

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi

; 28   :   SM3_CTX ctx;
; 29   :   int     i;
; 30   :   uint8_t out[32]={0};  

	push	7
	xor	eax, eax
	mov	BYTE PTR _out$[ebp], 0
	pop	ecx
	lea	edi, DWORD PTR _out$[ebp+1]
	rep stosd
	stosw
	stosb

; 31   :   
; 32   :   SM3_Init(&ctx);

	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_SM3_Init

; 33   :   SM3_Update(&ctx, argv[1], strlen(argv[1]));

	mov	eax, DWORD PTR _argv$[ebp]
	pop	ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, ecx
	lea	esi, DWORD PTR [eax+1]
$LL8@main:
	mov	dl, BYTE PTR [eax]
	inc	eax
	test	dl, dl
	jne	SHORT $LL8@main
	sub	eax, esi
	push	eax
	push	ecx
	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_SM3_Update

; 34   :   SM3_Finalx(out, &ctx);

	lea	eax, DWORD PTR _ctx$[ebp]
	push	eax
	lea	eax, DWORD PTR _out$[ebp]
	push	eax
	call	_SM3_Finalx

; 35   :   
; 36   :   printf ("\nSM3 = ");

	push	OFFSET ??_C@_07FFGCOJMP@?6SM3?5?$DN?5?$AA@
	call	_printf
	add	esp, 24					; 00000018H

; 37   :   for (i=0; i<32; i++) {

	xor	esi, esi
$LL3@main:

; 38   :     printf("%02x", out[i]); 

	movzx	eax, BYTE PTR _out$[ebp+esi]
	push	eax
	push	OFFSET ??_C@_04NOJCDH@?$CF02x?$AA@
	call	_printf
	inc	esi
	pop	ecx
	pop	ecx
	cmp	esi, 32					; 00000020H
	jl	SHORT $LL3@main

; 39   :   }
; 40   :   putchar('\n');

	push	10					; 0000000aH
	call	_putchar
	pop	ecx
	pop	edi

; 41   :   return 0;

	xor	eax, eax
	pop	esi

; 42   : }

	leave
	ret	0
_main	ENDP
_TEXT	ENDS
END
